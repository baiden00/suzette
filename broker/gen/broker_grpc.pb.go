// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: broker.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	// Publisher RPCs
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	ClearTopic(ctx context.Context, in *ClearTopicRequest, opts ...grpc.CallOption) (*ClearTopicResponse, error)
	BatchPublish(ctx context.Context, opts ...grpc.CallOption) (Broker_BatchPublishClient, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Subscriber RPCs
	StartConsume(ctx context.Context, in *StartConsumeRequest, opts ...grpc.CallOption) (Broker_StartConsumeClient, error)
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error)
	Notify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) ClearTopic(ctx context.Context, in *ClearTopicRequest, opts ...grpc.CallOption) (*ClearTopicResponse, error) {
	out := new(ClearTopicResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/ClearTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) BatchPublish(ctx context.Context, opts ...grpc.CallOption) (Broker_BatchPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[0], "/broker.Broker/BatchPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerBatchPublishClient{stream}
	return x, nil
}

type Broker_BatchPublishClient interface {
	Send(*BatchPublishRequest) error
	CloseAndRecv() (*BatchPublishResponse, error)
	grpc.ClientStream
}

type brokerBatchPublishClient struct {
	grpc.ClientStream
}

func (x *brokerBatchPublishClient) Send(m *BatchPublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerBatchPublishClient) CloseAndRecv() (*BatchPublishResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BatchPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) StartConsume(ctx context.Context, in *StartConsumeRequest, opts ...grpc.CallOption) (Broker_StartConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[1], "/broker.Broker/StartConsume", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerStartConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_StartConsumeClient interface {
	Recv() (*StartConsumeResponse, error)
	grpc.ClientStream
}

type brokerStartConsumeClient struct {
	grpc.ClientStream
}

func (x *brokerStartConsumeClient) Recv() (*StartConsumeResponse, error) {
	m := new(StartConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*CreateSubscriptionResponse, error) {
	out := new(CreateSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/CreateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Notify(ctx context.Context, in *CreateNotifyRequest, opts ...grpc.CallOption) (*CreateNotifyResponse, error) {
	out := new(CreateNotifyResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	// Publisher RPCs
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	ClearTopic(context.Context, *ClearTopicRequest) (*ClearTopicResponse, error)
	BatchPublish(Broker_BatchPublishServer) error
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Subscriber RPCs
	StartConsume(*StartConsumeRequest, Broker_StartConsumeServer) error
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error)
	Notify(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBrokerServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedBrokerServer) ClearTopic(context.Context, *ClearTopicRequest) (*ClearTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTopic not implemented")
}
func (UnimplementedBrokerServer) BatchPublish(Broker_BatchPublishServer) error {
	return status.Errorf(codes.Unimplemented, "method BatchPublish not implemented")
}
func (UnimplementedBrokerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBrokerServer) StartConsume(*StartConsumeRequest, Broker_StartConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method StartConsume not implemented")
}
func (UnimplementedBrokerServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*CreateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedBrokerServer) Notify(context.Context, *CreateNotifyRequest) (*CreateNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_ClearTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).ClearTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/ClearTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).ClearTopic(ctx, req.(*ClearTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_BatchPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).BatchPublish(&brokerBatchPublishServer{stream})
}

type Broker_BatchPublishServer interface {
	SendAndClose(*BatchPublishResponse) error
	Recv() (*BatchPublishRequest, error)
	grpc.ServerStream
}

type brokerBatchPublishServer struct {
	grpc.ServerStream
}

func (x *brokerBatchPublishServer) SendAndClose(m *BatchPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerBatchPublishServer) Recv() (*BatchPublishRequest, error) {
	m := new(BatchPublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_StartConsume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).StartConsume(m, &brokerStartConsumeServer{stream})
}

type Broker_StartConsumeServer interface {
	Send(*StartConsumeResponse) error
	grpc.ServerStream
}

type brokerStartConsumeServer struct {
	grpc.ServerStream
}

func (x *brokerStartConsumeServer) Send(m *StartConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/CreateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Notify(ctx, req.(*CreateNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Broker_Publish_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Broker_CreateTopic_Handler,
		},
		{
			MethodName: "ClearTopic",
			Handler:    _Broker_ClearTopic_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Broker_HealthCheck_Handler,
		},
		{
			MethodName: "CreateSubscription",
			Handler:    _Broker_CreateSubscription_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Broker_Notify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchPublish",
			Handler:       _Broker_BatchPublish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StartConsume",
			Handler:       _Broker_StartConsume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "broker.proto",
}
